{"version":3,"sources":["Components/Note.js","Services/note.js","App.js","index.js"],"names":["Note","note","toggle","className","content","onClick","important","baseUrl","axios","get","then","res","data","newObj","post","response","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","ip","document","querySelector","useEffect","noteService","length","notesToShow","filter","onSubmit","e","preventDefault","value","window","alert","noteObj","date","Date","toISOString","Math","random","createdNote","concat","console","log","type","onChange","target","map","i","find","n","changedNote","returnedNote","toggleImpt","ReactDOM","render","getElementById"],"mappings":"gLAceA,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAEjB,OACI,mCACA,qBAAIC,UAAU,yBAAd,cAAyCF,EAAKG,QAC9C,wBAAQD,UAAU,MAAME,QAASH,EAAjC,SAA0CD,EAAKK,UAAU,qBAAqB,yB,gBCLhFC,EAAU,aAmBD,EAjBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAG,OAAGA,EAAIC,SAenB,EAZA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAK,GAAQ,OAAGA,EAASH,SAU7B,EAPA,SAACI,EAAGH,GAEf,OADgBL,IAAMS,IAAN,UAAaV,EAAb,YAAwBS,GAAMH,GAC/BH,MAAK,SAAAK,GAAQ,OAAIA,EAASH,SCmF9BM,EA5FH,SAACC,GAEX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAiBMC,EAAKC,SAASC,cAAc,YA0BlCC,qBAAU,WACRC,IACCrB,MAAK,SAAAW,GACJC,EAASD,QAGV,CAACA,EAAMW,SAYZ,IAAMC,EAAcR,EAAUJ,EAAQA,EAAMa,QAAO,SAACjC,GAAD,OAAUA,EAAKK,aAEhE,OACE,gCACE,oBAAIH,UAAU,UAAd,mBACC,uBAAMA,UAAU,OAAOgC,SA9C5B,SAAiBC,GAEf,GADAA,EAAEC,iBACe,KAAbV,EAAGW,MACLC,OAAOC,MAAM,4BACR,CACL,IAAMC,EAAU,CACdrC,QAASmB,EACTmB,MAAM,IAAIC,MAAOC,cACjBtC,UAAWuC,KAAKC,SAAW,IAE9Bf,EACWU,GACP/B,MAAK,SAAAqC,GACJzB,EAASD,EAAM2B,OAAOD,IACtBE,QAAQC,IAAIH,MAGhBE,QAAQC,IAAI7B,GACZG,EAAW,MA4BV,UACC,0BAAUrB,UAAU,aAAagD,KAAK,OAAOb,MAAOf,EAAS6B,SAdnE,SAAmBhB,GACjBZ,EAAWY,EAAEiB,OAAOf,UAchB,wBAAQnC,UAAU,WAAWgD,KAAK,SAAlC,qBAED,wBAAQhD,UAAU,aAAaE,QAdpC,WACEqB,GAAYD,IAaT,SAAiDA,EAAQ,iBAAiB,aAG3E,oBAAItB,UAAU,iBAAd,SAEG8B,EAAYqB,KAAI,SAACrD,EAAKsD,GAAN,OAChB,cAAC,EAAD,CAEAtD,KAAQA,EACRC,OAAU,kBA5EE,SAACc,GAClBiC,QAAQC,IAAR,wBAA6BlC,EAA7B,yBACS,qBAAiBA,GAA1B,IACMf,EAAOoB,EAAMmC,MAAK,SAAAC,GAAC,OAAIA,EAAEzC,KAAOA,KAChC0C,EAAW,2BAAOzD,GAAP,IAAaK,WAAYL,EAAKK,YAEhDyB,EACQf,EAAG0C,GACVhD,MAAK,SAAAiD,GACJrC,EAASD,EAAMiC,KAAI,SAAArD,GAAI,OAAGA,EAAKe,KAAKA,EAAGf,EAAK0D,SAmE1BC,CAAW3D,EAAKe,MAFzBuC,YClFdM,IAASC,OAEL,cAAC,EAAD,IACFlC,SAASmC,eAAe,U","file":"static/js/main.0e2c1b63.chunk.js","sourcesContent":["\r\n\r\nconst Note = ({note, toggle}) => {\r\n\r\n    return(\r\n        <>\r\n        <li className=\"list-element grid-item\"> {note.content}\r\n        <button className=\"imp\" onClick={toggle}>{note.important?\"Make not important\":\"Make important\"}</button>\r\n         </li>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/notes\"\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(res=> res.data)\r\n}\r\n\r\nconst create = (newObj) => {\r\n    const request = axios.post(baseUrl, newObj)\r\n    return request.then(response=> response.data)\r\n}\r\n\r\nconst update = (id,newObj) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObj)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n\r\n\r\nexport default { getAll, create, update }","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Note from \"./Components/Note\";\nimport axios from \"axios\";\nimport noteService from './Services/note'\nimport './index.css'\n\nconst App = (props) => {\n\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(false);\n\n  //Toggle Important\n  const toggleImpt = (id) =>{\n    console.log(`Importance of ${id} needs to be toggled`);\n    const url = `/api/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n   noteService\n   .update(id,changedNote)\n   .then(returnedNote => {\n     setNotes(notes.map(note=> note.id!==id?note:returnedNote))\n   })\n  }\n\n \n  const ip = document.querySelector(\"textarea\");\n\n  //ADD NOTE\n  function addNote(e) {\n    e.preventDefault();\n    if (ip.value === \"\") {\n      window.alert(\"Input can't be empty\");\n    } else {\n      const noteObj = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n      };\n     noteService\n        .create(noteObj)\n        .then(createdNote => {\n          setNotes(notes.concat(createdNote));\n          console.log(createdNote)\n        })\n\n      console.log(notes);\n      setNewNote(\"\");\n    }\n  }\n\n  //Get All Notes\n  useEffect(()=>{\n    noteService.getAll()\n    .then(notes=> {\n      setNotes(notes)\n    })\n   }\n    ,[notes.length])\n  \n \n\n  function ipHandler(e) {\n    setNewNote(e.target.value);\n  }\n  function viewer() {\n    setShowAll(!showAll);\n  }\n\n//Display Notes\nconst notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1 className=\"heading\">Notes</h1>\n       <form className=\"form\" onSubmit={addNote}>\n        <textarea className=\"form-input\" type=\"text\" value={newNote} onChange={ipHandler} />\n        <button className=\"form-btn\" type=\"submit\">Save</button>\n      </form>\n       <button className=\"toggle-btn\" onClick={viewer}>{showAll?'Show Important':'Show All'}</button>\n      \n      \n      <ul className=\"note-container\">\n\n        {notesToShow.map((note,i) => (\n         <Note \n         key={i}\n         note = {note}\n         toggle = {()=>toggleImpt(note.id)} />\n        ))}\n      </ul>\n\n     \n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}